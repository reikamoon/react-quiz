{"version":3,"sources":["components/game.js","App.js","reportWebVitals.js","index.js"],"names":["Game","id","setBgcolor","useState","pointer","setPointer","data","question","bg","answers","textcolor","color","style","backgroundColor","className","onClick","next","text","App","bgcolor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oxDAwDeA,MAnDf,YAAkC,EAAlBC,GAAmB,IAAfC,EAAc,EAAdA,WAAc,EACFC,mBAAS,GADP,mBACzBC,EADyB,KAChBC,EADgB,OAGFC,EAAKF,GAA3BG,EAHwB,EAGxBA,SAGFC,GAN0B,EAGdC,QAGPH,EAAKF,GAASI,IACnBE,EAAYJ,EAAKF,GAASO,MAIhC,OAFAT,EAAWM,GAGT,qBAAKI,MAAO,CAAEC,gBAAiBL,EAAIG,MAAOD,GAA1C,SACE,sBAAKI,UAAU,kBAAf,UACE,qBACEA,UAAU,gBACVF,MAAO,CAAEC,gBAAiBL,EAAIG,MAAOD,GAFvC,SAIE,6BAAKN,MAGP,6CAEA,qBAAKU,UAAU,QAAf,SACE,6BAAKP,MAGND,EAAKF,GAASK,QAAQ,GACrB,wBACEK,UAAU,UACVF,MAAO,CAAEC,gBAAiBL,EAAIG,MAAOD,GACrCK,QAAS,kBAAMV,EAAWC,EAAKF,GAASK,QAAQ,GAAGO,OAHrD,SAKGV,EAAKF,GAASK,QAAQ,GAAGQ,OAE1B,KAEHX,EAAKF,GAASK,QAAQ,GACrB,wBACEK,UAAU,UACVF,MAAO,CAAEC,gBAAiBL,EAAIG,MAAOD,GACrCK,QAAS,kBAAMV,EAAWC,EAAKF,GAASK,QAAQ,GAAGO,OAHrD,SAKGV,EAAKF,GAASK,QAAQ,GAAGQ,OAE1B,WCzBGC,MApBf,WAAe,MAEiBf,mBAAS,GAF1B,mBAENC,EAFM,aAGiBD,mBAAS,YAH1B,mBAGNgB,EAHM,KAGGjB,EAHH,KAKPQ,EAAYJ,EAAKF,GAASO,MAGhC,OACE,qBAAKG,UAAU,MAAMF,MAAO,CAAEC,gBAAiBM,EAASR,MAAOD,GAA/D,SACE,wBACEI,UAAU,aACVF,MAAO,CAAEC,gBAAiBM,EAASR,MAAOD,GAF5C,SAIE,cAAC,EAAD,CAAMN,QAASA,EAASF,WAAY,SAACiB,GAAD,OAAajB,EAAWiB,WCPrDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.657650bb.chunk.js","sourcesContent":["/* eslint-disable react/jsx-no-comment-textnodes */\nimport React, { useState } from \"react\";\nimport data from \"../data.json\";\nimport \"./game.css\";\n\nfunction Game({ id, setBgcolor }) {\n  const [pointer, setPointer] = useState(0);\n  //Props\n  const { question, answers } = data[pointer];\n\n  //Colors\n  const bg = data[pointer].bg;\n  const textcolor = data[pointer].color;\n  //Set the background color to whatever color is on the current json entry.\n  setBgcolor(bg);\n\n  return (\n    <div style={{ backgroundColor: bg, color: textcolor }}>\n      <div className=\"bordercontainer\">\n        <div\n          className=\"pointernumber\"\n          style={{ backgroundColor: bg, color: textcolor }}\n        >\n          <h1>{pointer}</h1>\n        </div>\n\n        <h1>React Quiz!</h1>\n\n        <div className=\"title\">\n          <h1>{question}</h1>\n        </div>\n\n        {data[pointer].answers[0] ? (\n          <button\n            className=\"button1\"\n            style={{ backgroundColor: bg, color: textcolor }}\n            onClick={() => setPointer(data[pointer].answers[0].next)}\n          >\n            {data[pointer].answers[0].text}\n          </button>\n        ) : null}\n\n        {data[pointer].answers[1] ? (\n          <button\n            className=\"button2\"\n            style={{ backgroundColor: bg, color: textcolor }}\n            onClick={() => setPointer(data[pointer].answers[1].next)}\n          >\n            {data[pointer].answers[1].text}\n          </button>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Game from \"./components/game\";\nimport data from \"./data.json\";\n\nfunction App() {\n// React Hooks\n  const [pointer, setPointer] = useState(0);\n  const [bgcolor, setBgcolor] = useState(\"#F00000\");\n\n  const textcolor = data[pointer].color;\n  \n\n  return (\n    <div className=\"App\" style={{ backgroundColor: bgcolor, color: textcolor }}>\n      <header\n        className=\"App-header\"\n        style={{ backgroundColor: bgcolor, color: textcolor }}\n      >\n        <Game pointer={pointer} setBgcolor={(bgcolor) => setBgcolor(bgcolor)} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}